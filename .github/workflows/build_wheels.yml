name: Build Wheels

on:
  workflow_dispatch:
  pull_request:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      MACOSX_DEPLOYMENT_TARGET: "10.15"
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-11, windows-latest]
        cibw_archs: ["auto64"]
        cibw_build: ["cp38-*", "cp39-*", "cp310-*", "cp311-*"]

    steps:
      - uses: actions/checkout@v3
        name: Check out

      - uses: ilammy/msvc-dev-cmd@v1
        name: Add MSVS Path

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.8'

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel==2.12.1 delvewheel wheel

      - name: Building wheels
        run: |
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_BUILD_VERBOSITY: 3
          CIBW_SKIP: "*musllinux*"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_BEFORE_ALL_MACOS: bash ci-utils/install_prereq_linux.sh &&
                                   mkdir -p /tmp/filepattern_bld &&
                                   cp -r local_install /tmp/filepattern_bld
          CIBW_BEFORE_ALL_LINUX:  bash ci-utils/install_prereq_linux.sh &&
                                   mkdir -p /tmp/filepattern_bld &&
                                   cp -r local_install /tmp/filepattern_bld
          CIBW_BEFORE_ALL_WINDOWS: ci-utils\install_prereq_win.bat &&
                                   xcopy /E /I /y local_install C:\TEMP\filepattern_bld\local_install

          CIBW_ENVIRONMENT_MACOS: REPAIR_LIBRARY_PATH="/tmp/filepattern_bld/local_install/lib:/tmp/filepattern_bld/local_install/lib64" ON_GITHUB="TRUE" FILEPATTERN_DEP_DIR="/tmp/filepattern_bld/local_install"
          CIBW_ENVIRONMENT_LINUX: LD_LIBRARY_PATH="/tmp/filepattern_bld/local_install/lib:/tmp/filepattern_bld/local_install/lib64:$LD_LIBRARY_PATH" ON_GITHUB="TRUE" FILEPATTERN_DEP_DIR="/tmp/filepattern_bld/local_install"
          CIBW_ENVIRONMENT_WINDOWS: PATH="$TEMP\\filepattern\\bin;$PATH" ON_GITHUB="TRUE" FILEPATTERN_DEP_DIR="C:\\TEMP\\filepattern_bld\\local_install"
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: DYLD_LIBRARY_PATH=$REPAIR_LIBRARY_PATH delocate-listdeps {wheel} && DYLD_LIBRARY_PATH=$REPAIR_LIBRARY_PATH delocate-wheel --require-archs {delocate_archs} -w {dest_dir} {wheel}
          CIBW_ARCHS: ${{ matrix.cibw_archs }}
          CIBW_TEST_REQUIRES: pytest pydantic
          CIBW_TEST_COMMAND: pytest {project}/tests/

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: filepattern-wheels
          path: dist/*.whl
          retention-days: 1

  build_wheels_apple_silicon:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      MACOSX_DEPLOYMENT_TARGET: "11.0"
    strategy:
      matrix:
        os: [macos-13-xlarge]
        cibw_archs: ["arm64"]
        cibw_build: ["cp39-*", "cp310-*", "cp311-*"]

    steps:
      - uses: actions/checkout@v3
        name: Check out

      - uses: ilammy/msvc-dev-cmd@v1
        name: Add MSVS Path

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: '3.11'
    
      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel==2.15.0 delvewheel wheel

      - name: Building wheels
        run: |
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: ${{ matrix.cibw_build }}
          CIBW_BUILD_VERBOSITY: 3
          CIBW_ARCHS_MACOS: arm64
          CIBW_BEFORE_ALL_MACOS: bash ci-utils/install_prereq_linux.sh &&
                                   mkdir -p /tmp/filepattern_bld &&
                                   cp -r local_install /tmp/filepattern_bld 
          CIBW_ENVIRONMENT_MACOS: REPAIR_LIBRARY_PATH="/tmp/filepattern_bld/local_install/lib:/tmp/filepattern_bld/local_install/lib64" ON_GITHUB="TRUE" FILEPATTERN_DEP_DIR="/tmp/filepattern_bld/local_install"
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: DYLD_LIBRARY_PATH=$REPAIR_LIBRARY_PATH delocate-listdeps {wheel} && DYLD_LIBRARY_PATH=$REPAIR_LIBRARY_PATH delocate-wheel --require-archs {delocate_archs} -w {dest_dir} {wheel}
          CIBW_ARCHS: ${{ matrix.cibw_archs }}
          CIBW_TEST_REQUIRES: pytest pydantic
          CIBW_TEST_COMMAND: pytest {project}/tests/

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: filepattern-wheels-apple-silicon
          path: dist/*.whl
          retention-days: 1
  
  find-tools:
    needs: [build_wheels, build_wheels_apple_silicon]
    name: Find Image Tools
    uses: polusai/image-tools/.github/workflows/find-all-tools.yml@master

  pre-tests:
    name: Pre-update | ${{ matrix.tool_name }}
    runs-on: ubuntu-latest
    needs: find-tools
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.find-tools.outputs.matrix)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: 'polusai/image-tools'
          ref: 'master'
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
      - name: Install | ${{ matrix.tool_name }}
        run: |
          cd ${{ matrix.tool_dir }}
          poetry install
      - name: Tests
        run: |
          cd ${{ matrix.tool_dir }}
          poetry run pytest -v

  post-tests:
    name: Post-Update | ${{ matrix.tool_name }}
    runs-on: ubuntu-latest
    needs: find-tools
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.find-tools.outputs.matrix)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: 'polusai/image-tools'
          ref: 'master'
      - name: Install | Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Install | Poetry
        uses: abatilo/actions-poetry@v2
      - name: Download | Wheels
        uses: actions/download-artifact@v2
        with:
          name: filepattern-wheels
          path: dist/filepattern-wheels
      - name: Install | ${{ matrix.tool_name }}
        run: |
          root_dir=$(pwd)
          cd ${{ matrix.tool_dir }}
          poetry install && pip install --find-links=${root_dir}/dist/filepattern-wheels filepattern
      - name: Tests
        run: |
          cd ${{ matrix.tool_dir }}
          poetry run pytest -v
